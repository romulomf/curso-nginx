server {
	listen 80;
	server_name localhost;

	location / {
		root /usr/share/nginx/html;
		index index.html index.htm;
	}

	# A / no fim do caminho do location que neste exemplo é /qux e é configurada
	# como /qux/ (com a / adicional no fim) se faz necessário para que as demais
	# uri que vem depois de /qux/ sejam corretamente computadas pelo proxy. Isto
	# porque não basta apenas configurar o proxy_pass como está descrito a seguir
	# com a / no final, pois caso fosse apenas esta a configuração a única uri
	# que seria corretamente invocada é a uri raiz (root) que é o próprio / lá no
	# servidor de destino.
	#
	# É necessário que não seja adicionado o /qux quando estamos navegando para o
	# caminho / lá do servidor destino da configuração de proxy, entretanto todos
	# os outros caminhos depois do / precisam ter o prefixo /qux, pois caso contrário
	# nenhum deles seria encontrado e as requisições todas resultariam em HTTP 404.
	#
	# E o responsável por fazer esse prefixo /qux/ para todos os demais caminhos que
	# estão sob o guarda chuva do proxy, é justamente essa / ao final. Desta forma,
	# mesmo que a intenção seja configurar um caminho como /qux é sempre necessário
	# que seja adicionada a / ao final como também é feito lá na diretiva que faz o
	# encaminhamento para o servidor proxy.

	location /qux/ {

		# A / no fim do endereço de proxy_pass é de fundamental importância.
		# isto por que ela faz com que o caminho relativo a partir do location
		# seja o que vem após o endereço do próprio location.
		#
		# Fica mais fácil de entender se visualizarmos um exemplo. Caso estivesse
		# sem a barra no final (depois de :8001) digamos, e tentássemos acessar o
		# endereço http://localhost/foo/bar, o que seria encaminhado para o servidor
		# que está executando em http://localhost é todo o caminho incluindo o
		# location, que ficaria então no fim das contas o endereço final sendo o
		# http://localhost/foo/bar.
		#
		# A questão é que /foo é apenas um alias, uma url "virtual" para o servidor,
		# e não é de interesse, mandar essa parte da url, mas sim apenas o que vem
		# depois dela. Aí entram entra em cena o trabalho da / no final. com ela, o
		# que vai ser enviado é o caminho a partir do location /service1, mas sem
		# enviar o próprio location. O resultado da configuração utilizando a / é
		# então que o caminho no servidor de destino é http://localhost/bar
		# (sem o /foo) que é apenas o prefixo da url virtual.
		proxy_pass http://localhost:8004/;
		proxy_set_header Host $host;
	}

	error_page 500 502 503 504 /50x.html;

	location = /50x.html {
		root   /usr/share/nginx/html;
	}
}

# Um upstream é um grupo de servidores, que podem ser referenciados.
# é possível usar esse nome do upstream para fazer configurações que
# são poderosas como criar um conjunto de servidores que integra um
# balanceador de carga.

upstream servicos {

	# least_conn especifica uma outra opção de algoritmo de balanceamento
	# de carga. ele leva em consideração quantas conexões abertas tem um
	# servidor e encaminha para o que tiver menos conexões.

	#least_conn;

	# O atributo weight em um servidor, determina o peso dele. o peso
	# nada mais é do que uma indicativa de maior capacidade do servidor
	# que pertence ao upstream. Quando configuramos o peso o número
	# quanto maior deve indicar um servidor com mais capacidade de recursos
	# de hardware. Isto porque o servidor de maior peso, irá receber mais
	# requisições. é um recurso bastante útil para fazer um balenceamento
	# proporcional a capacidade de recursos que cada servidor tem um
	# ambiente heterogêneo. O exemplo dessa configuração aqui, indica que
	# a cada 3 requisições, 2 são encaminhadas para o servidor 1 enquanto
	# 1 é encaminhada para o servidor 2.

	server localhost:8001 weight=2;
	server localhost:8002 weight=1;

	# Atribuir a diretiva backup para um servidor de um upstram, significa
	# que este servidor não recebe as requisições enquanto os demais servidores
	# estiverem respondendo. Ele só é ativado, quando os demais estiverem
	# offline (não respondendo). Essa é a ideia de um servidor de backup

	server localhost:8003 backup;
}

server {
	listen *:8000;
	server_name localhost;

	location / {
		# Isto é uma simples implementação de um balanceador de carga.
		# o proxy é feito não para um servidor específico, mas sim para
		# um grupo de servidores, ou como o nginx chama, um upstream.
		# Desta forma quem vai atender essa requisição vai ser qualquer
		# um dos servidores que integra o upstream referenciado aqui.

		proxy_pass http://servicos;

		# É possível encaminhar pelo proxy reverso cabeçalhos http customizados.
		# a ideia aqui é que quando usa-se um proxy reverso, o servidor de destino,
		# que é aquele que de fato irá processar a requisição, fica sempre por
		# trás do servidor que faz o papel de proxy. Isso tem uma implicação importante
		# e traz um "problema" para o servidor de destino. lá no servidor que realmente
		# processa as requisições ele sempre irá enxergar que a origem das requisições
		# que chegam até ele são provenientes do servidor proxy. com isso não consegumos
		# lá saber quem de fato fez a requisição, pois essa informação é "perdida" quando
		# o servivor de proxy faz o encaminhamento. Uma forma de contornar esse problema
		# e ter a informação real de quem realmente fez a requisição original, é adicionar
		# um cabeçalho http customizado como esse. Por conveção, cabeçalhos http que não
		# fazem parte da especificação, são iniciados por X- e por este motivo, a
		# configuração neste exemplo nomeia esse cabeçalho para enviar para o servidor
		# de destino o ip de origem da requisição, de forma a evitar que o servidor de
		# destino fique "cego" para o mundo externo, enxergando apenas o endereço do proxy.

		proxy_set_header X-Real-IP $remote_addr;
	}
}